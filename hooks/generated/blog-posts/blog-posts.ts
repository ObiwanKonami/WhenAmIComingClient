/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BlogPostDto,
  CreateBlogPostCommand,
  ProblemDetails,
  UpdateBlogPostCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBlogPosts = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<BlogPostDto[]>(
    { url: `/api/BlogPosts`, method: "GET", signal },
    options,
  );
};

export const getGetApiBlogPostsQueryKey = () => {
  return [`/api/BlogPosts`] as const;
};

export const getGetApiBlogPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBlogPosts>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiBlogPosts>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiBlogPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBlogPosts>>> = ({
    signal,
  }) => getApiBlogPosts(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBlogPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBlogPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBlogPosts>>
>;
export type GetApiBlogPostsQueryError = ErrorType<unknown>;

export function useGetApiBlogPosts<
  TData = Awaited<ReturnType<typeof getApiBlogPosts>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBlogPosts>>,
          TError,
          Awaited<ReturnType<typeof getApiBlogPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBlogPosts<
  TData = Awaited<ReturnType<typeof getApiBlogPosts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBlogPosts>>,
          TError,
          Awaited<ReturnType<typeof getApiBlogPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBlogPosts<
  TData = Awaited<ReturnType<typeof getApiBlogPosts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBlogPosts<
  TData = Awaited<ReturnType<typeof getApiBlogPosts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBlogPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBlogPosts = (
  createBlogPostCommand: CreateBlogPostCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/BlogPosts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBlogPostCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBlogPostsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBlogPosts>>,
    TError,
    { data: CreateBlogPostCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBlogPosts>>,
  TError,
  { data: CreateBlogPostCommand },
  TContext
> => {
  const mutationKey = ["postApiBlogPosts"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBlogPosts>>,
    { data: CreateBlogPostCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiBlogPosts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBlogPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBlogPosts>>
>;
export type PostApiBlogPostsMutationBody = CreateBlogPostCommand;
export type PostApiBlogPostsMutationError = ErrorType<unknown>;

export const usePostApiBlogPosts = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBlogPosts>>,
      TError,
      { data: CreateBlogPostCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBlogPosts>>,
  TError,
  { data: CreateBlogPostCommand },
  TContext
> => {
  const mutationOptions = getPostApiBlogPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBlogPostsPostId = (
  postId: number,
  updateBlogPostCommand: UpdateBlogPostCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/BlogPosts/${postId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateBlogPostCommand,
    },
    options,
  );
};

export const getPutApiBlogPostsPostIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBlogPostsPostId>>,
    TError,
    { postId: number; data: UpdateBlogPostCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBlogPostsPostId>>,
  TError,
  { postId: number; data: UpdateBlogPostCommand },
  TContext
> => {
  const mutationKey = ["putApiBlogPostsPostId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBlogPostsPostId>>,
    { postId: number; data: UpdateBlogPostCommand }
  > = (props) => {
    const { postId, data } = props ?? {};

    return putApiBlogPostsPostId(postId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBlogPostsPostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBlogPostsPostId>>
>;
export type PutApiBlogPostsPostIdMutationBody = UpdateBlogPostCommand;
export type PutApiBlogPostsPostIdMutationError = ErrorType<ProblemDetails>;

export const usePutApiBlogPostsPostId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBlogPostsPostId>>,
      TError,
      { postId: number; data: UpdateBlogPostCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBlogPostsPostId>>,
  TError,
  { postId: number; data: UpdateBlogPostCommand },
  TContext
> => {
  const mutationOptions = getPutApiBlogPostsPostIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBlogPostsPostId = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/BlogPosts/${postId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiBlogPostsPostIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>,
    TError,
    { postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>,
  TError,
  { postId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBlogPostsPostId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>,
    { postId: number }
  > = (props) => {
    const { postId } = props ?? {};

    return deleteApiBlogPostsPostId(postId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBlogPostsPostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>
>;

export type DeleteApiBlogPostsPostIdMutationError = ErrorType<ProblemDetails>;

export const useDeleteApiBlogPostsPostId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>,
      TError,
      { postId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBlogPostsPostId>>,
  TError,
  { postId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiBlogPostsPostIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
