/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateResponse,
  CreateServiceCommand,
  ProblemDetails,
  ServiceDto,
  UpdateServiceCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdServices = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ServiceDto[]>(
    { url: `/api/business/${businessId}/services`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdServicesQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/services`] as const;
};

export const getGetApiBusinessBusinessIdServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdServicesQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdServices(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>
>;
export type GetApiBusinessBusinessIdServicesQueryError =
  ErrorType<ProblemDetails>;

export function useGetApiBusinessBusinessIdServices<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdServices<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdServices<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdServices<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdServices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdServicesQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdServices = (
  businessId: number,
  createServiceCommand: CreateServiceCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateResponse>(
    {
      url: `/api/business/${businessId}/services`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createServiceCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdServicesMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>,
    TError,
    { businessId: number; data: CreateServiceCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>,
  TError,
  { businessId: number; data: CreateServiceCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdServices"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>,
    { businessId: number; data: CreateServiceCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdServices(businessId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdServicesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>
>;
export type PostApiBusinessBusinessIdServicesMutationBody =
  CreateServiceCommand;
export type PostApiBusinessBusinessIdServicesMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePostApiBusinessBusinessIdServices = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>,
      TError,
      { businessId: number; data: CreateServiceCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdServices>>,
  TError,
  { businessId: number; data: CreateServiceCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdServicesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdServicesServiceId = (
  businessId: number,
  serviceId: number,
  updateServiceCommand: UpdateServiceCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/services/${serviceId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateServiceCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdServicesServiceIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>,
    TError,
    { businessId: number; serviceId: number; data: UpdateServiceCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>,
  TError,
  { businessId: number; serviceId: number; data: UpdateServiceCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessBusinessIdServicesServiceId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>,
    { businessId: number; serviceId: number; data: UpdateServiceCommand }
  > = (props) => {
    const { businessId, serviceId, data } = props ?? {};

    return putApiBusinessBusinessIdServicesServiceId(
      businessId,
      serviceId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessBusinessIdServicesServiceIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>
  >;
export type PutApiBusinessBusinessIdServicesServiceIdMutationBody =
  UpdateServiceCommand;
export type PutApiBusinessBusinessIdServicesServiceIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails | ProblemDetails
>;

export const usePutApiBusinessBusinessIdServicesServiceId = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>,
      TError,
      { businessId: number; serviceId: number; data: UpdateServiceCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdServicesServiceId>>,
  TError,
  { businessId: number; serviceId: number; data: UpdateServiceCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdServicesServiceIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdServicesServiceId = (
  businessId: number,
  serviceId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/services/${serviceId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdServicesServiceIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>,
    TError,
    { businessId: number; serviceId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>,
  TError,
  { businessId: number; serviceId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBusinessBusinessIdServicesServiceId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>,
    { businessId: number; serviceId: number }
  > = (props) => {
    const { businessId, serviceId } = props ?? {};

    return deleteApiBusinessBusinessIdServicesServiceId(
      businessId,
      serviceId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBusinessBusinessIdServicesServiceIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>
  >;

export type DeleteApiBusinessBusinessIdServicesServiceIdMutationError =
  ErrorType<ProblemDetails | ProblemDetails>;

export const useDeleteApiBusinessBusinessIdServicesServiceId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>,
      TError,
      { businessId: number; serviceId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdServicesServiceId>>,
  TError,
  { businessId: number; serviceId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdServicesServiceIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
