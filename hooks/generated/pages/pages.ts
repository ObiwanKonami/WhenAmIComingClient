/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreatePageCommand,
  PageDto,
  ProblemDetails,
  UpdatePageCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiPagesSlug = (
  slug: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageDto>(
    { url: `/api/Pages/${slug}`, method: "GET", signal },
    options,
  );
};

export const getGetApiPagesSlugQueryKey = (slug?: string) => {
  return [`/api/Pages/${slug}`] as const;
};

export const getGetApiPagesSlugQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPagesSlug>>,
  TError = ErrorType<ProblemDetails>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPagesSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPagesSlugQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPagesSlug>>> = ({
    signal,
  }) => getApiPagesSlug(slug, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!slug,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPagesSlug>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPagesSlugQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPagesSlug>>
>;
export type GetApiPagesSlugQueryError = ErrorType<ProblemDetails>;

export function useGetApiPagesSlug<
  TData = Awaited<ReturnType<typeof getApiPagesSlug>>,
  TError = ErrorType<ProblemDetails>,
>(
  slug: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPagesSlug>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPagesSlug>>,
          TError,
          Awaited<ReturnType<typeof getApiPagesSlug>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPagesSlug<
  TData = Awaited<ReturnType<typeof getApiPagesSlug>>,
  TError = ErrorType<ProblemDetails>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPagesSlug>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPagesSlug>>,
          TError,
          Awaited<ReturnType<typeof getApiPagesSlug>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPagesSlug<
  TData = Awaited<ReturnType<typeof getApiPagesSlug>>,
  TError = ErrorType<ProblemDetails>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPagesSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPagesSlug<
  TData = Awaited<ReturnType<typeof getApiPagesSlug>>,
  TError = ErrorType<ProblemDetails>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPagesSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPagesSlugQueryOptions(slug, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiPages = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageDto[]>(
    { url: `/api/Pages`, method: "GET", signal },
    options,
  );
};

export const getGetApiPagesQueryKey = () => {
  return [`/api/Pages`] as const;
};

export const getGetApiPagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPages>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiPages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPagesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPages>>> = ({
    signal,
  }) => getApiPages(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPages>>
>;
export type GetApiPagesQueryError = ErrorType<unknown>;

export function useGetApiPages<
  TData = Awaited<ReturnType<typeof getApiPages>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPages>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPages>>,
          TError,
          Awaited<ReturnType<typeof getApiPages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPages<
  TData = Awaited<ReturnType<typeof getApiPages>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPages>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPages>>,
          TError,
          Awaited<ReturnType<typeof getApiPages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPages<
  TData = Awaited<ReturnType<typeof getApiPages>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPages>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPages<
  TData = Awaited<ReturnType<typeof getApiPages>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPages>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPagesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiPages = (
  createPageCommand: CreatePageCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Pages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPageCommand,
      signal,
    },
    options,
  );
};

export const getPostApiPagesMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPages>>,
    TError,
    { data: CreatePageCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPages>>,
  TError,
  { data: CreatePageCommand },
  TContext
> => {
  const mutationKey = ["postApiPages"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPages>>,
    { data: CreatePageCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPages(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPagesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPages>>
>;
export type PostApiPagesMutationBody = CreatePageCommand;
export type PostApiPagesMutationError = ErrorType<unknown>;

export const usePostApiPages = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiPages>>,
      TError,
      { data: CreatePageCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiPages>>,
  TError,
  { data: CreatePageCommand },
  TContext
> => {
  const mutationOptions = getPostApiPagesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiPagesPageId = (
  pageId: number,
  updatePageCommand: UpdatePageCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Pages/${pageId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updatePageCommand,
    },
    options,
  );
};

export const getPutApiPagesPageIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPagesPageId>>,
    TError,
    { pageId: number; data: UpdatePageCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPagesPageId>>,
  TError,
  { pageId: number; data: UpdatePageCommand },
  TContext
> => {
  const mutationKey = ["putApiPagesPageId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPagesPageId>>,
    { pageId: number; data: UpdatePageCommand }
  > = (props) => {
    const { pageId, data } = props ?? {};

    return putApiPagesPageId(pageId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPagesPageIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPagesPageId>>
>;
export type PutApiPagesPageIdMutationBody = UpdatePageCommand;
export type PutApiPagesPageIdMutationError = ErrorType<unknown>;

export const usePutApiPagesPageId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiPagesPageId>>,
      TError,
      { pageId: number; data: UpdatePageCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiPagesPageId>>,
  TError,
  { pageId: number; data: UpdatePageCommand },
  TContext
> => {
  const mutationOptions = getPutApiPagesPageIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiPagesPageId = (
  pageId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Pages/${pageId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiPagesPageIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiPagesPageId>>,
    TError,
    { pageId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiPagesPageId>>,
  TError,
  { pageId: number },
  TContext
> => {
  const mutationKey = ["deleteApiPagesPageId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiPagesPageId>>,
    { pageId: number }
  > = (props) => {
    const { pageId } = props ?? {};

    return deleteApiPagesPageId(pageId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiPagesPageIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPagesPageId>>
>;

export type DeleteApiPagesPageIdMutationError = ErrorType<unknown>;

export const useDeleteApiPagesPageId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiPagesPageId>>,
      TError,
      { pageId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiPagesPageId>>,
  TError,
  { pageId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiPagesPageIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
