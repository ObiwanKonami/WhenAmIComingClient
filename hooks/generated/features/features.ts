/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AssignFeatureToPlanCommand,
  CreateFeatureCommand,
  FeatureDto,
  ProblemDetails,
  UpdateFeatureCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiFeatures = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FeatureDto[]>(
    { url: `/api/Features`, method: "GET", signal },
    options,
  );
};

export const getGetApiFeaturesQueryKey = () => {
  return [`/api/Features`] as const;
};

export const getGetApiFeaturesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiFeatures>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiFeatures>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiFeaturesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFeatures>>> = ({
    signal,
  }) => getApiFeatures(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiFeatures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiFeaturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiFeatures>>
>;
export type GetApiFeaturesQueryError = ErrorType<unknown>;

export function useGetApiFeatures<
  TData = Awaited<ReturnType<typeof getApiFeatures>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFeatures>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFeatures>>,
          TError,
          Awaited<ReturnType<typeof getApiFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiFeatures<
  TData = Awaited<ReturnType<typeof getApiFeatures>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFeatures>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFeatures>>,
          TError,
          Awaited<ReturnType<typeof getApiFeatures>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiFeatures<
  TData = Awaited<ReturnType<typeof getApiFeatures>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFeatures>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiFeatures<
  TData = Awaited<ReturnType<typeof getApiFeatures>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFeatures>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiFeaturesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiFeatures = (
  createFeatureCommand: CreateFeatureCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Features`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFeatureCommand,
      signal,
    },
    options,
  );
};

export const getPostApiFeaturesMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiFeatures>>,
    TError,
    { data: CreateFeatureCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiFeatures>>,
  TError,
  { data: CreateFeatureCommand },
  TContext
> => {
  const mutationKey = ["postApiFeatures"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiFeatures>>,
    { data: CreateFeatureCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiFeatures(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiFeaturesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiFeatures>>
>;
export type PostApiFeaturesMutationBody = CreateFeatureCommand;
export type PostApiFeaturesMutationError = ErrorType<ProblemDetails>;

export const usePostApiFeatures = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiFeatures>>,
      TError,
      { data: CreateFeatureCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiFeatures>>,
  TError,
  { data: CreateFeatureCommand },
  TContext
> => {
  const mutationOptions = getPostApiFeaturesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiFeaturesFeatureId = (
  featureId: number,
  updateFeatureCommand: UpdateFeatureCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Features/${featureId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateFeatureCommand,
    },
    options,
  );
};

export const getPutApiFeaturesFeatureIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiFeaturesFeatureId>>,
    TError,
    { featureId: number; data: UpdateFeatureCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiFeaturesFeatureId>>,
  TError,
  { featureId: number; data: UpdateFeatureCommand },
  TContext
> => {
  const mutationKey = ["putApiFeaturesFeatureId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiFeaturesFeatureId>>,
    { featureId: number; data: UpdateFeatureCommand }
  > = (props) => {
    const { featureId, data } = props ?? {};

    return putApiFeaturesFeatureId(featureId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiFeaturesFeatureIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiFeaturesFeatureId>>
>;
export type PutApiFeaturesFeatureIdMutationBody = UpdateFeatureCommand;
export type PutApiFeaturesFeatureIdMutationError = ErrorType<ProblemDetails>;

export const usePutApiFeaturesFeatureId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiFeaturesFeatureId>>,
      TError,
      { featureId: number; data: UpdateFeatureCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiFeaturesFeatureId>>,
  TError,
  { featureId: number; data: UpdateFeatureCommand },
  TContext
> => {
  const mutationOptions = getPutApiFeaturesFeatureIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiFeaturesAssignToPlan = (
  assignFeatureToPlanCommand: AssignFeatureToPlanCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Features/assign-to-plan`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: assignFeatureToPlanCommand,
      signal,
    },
    options,
  );
};

export const getPostApiFeaturesAssignToPlanMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>,
    TError,
    { data: AssignFeatureToPlanCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>,
  TError,
  { data: AssignFeatureToPlanCommand },
  TContext
> => {
  const mutationKey = ["postApiFeaturesAssignToPlan"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>,
    { data: AssignFeatureToPlanCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiFeaturesAssignToPlan(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiFeaturesAssignToPlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>
>;
export type PostApiFeaturesAssignToPlanMutationBody =
  AssignFeatureToPlanCommand;
export type PostApiFeaturesAssignToPlanMutationError =
  ErrorType<ProblemDetails>;

export const usePostApiFeaturesAssignToPlan = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>,
      TError,
      { data: AssignFeatureToPlanCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiFeaturesAssignToPlan>>,
  TError,
  { data: AssignFeatureToPlanCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiFeaturesAssignToPlanMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
