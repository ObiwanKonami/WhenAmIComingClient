/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { TransactionDto } from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiTransactions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TransactionDto[]>(
    { url: `/api/Transactions`, method: "GET", signal },
    options,
  );
};

export const getGetApiTransactionsQueryKey = () => {
  return [`/api/Transactions`] as const;
};

export const getGetApiTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiTransactions>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTransactions>>
  > = ({ signal }) => getApiTransactions(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransactions>>
>;
export type GetApiTransactionsQueryError = ErrorType<unknown>;

export function useGetApiTransactions<
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactions>>,
          TError,
          Awaited<ReturnType<typeof getApiTransactions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTransactions<
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTransactions>>,
          TError,
          Awaited<ReturnType<typeof getApiTransactions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTransactions<
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiTransactions<
  TData = Awaited<ReturnType<typeof getApiTransactions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiTransactionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
