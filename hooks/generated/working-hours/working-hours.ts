/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateWorkingHourCommand,
  GetApiBusinessBusinessIdWorkinghoursParams,
  UpdateWorkingHourCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdWorkinghours = (
  businessId: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/workinghours`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetApiBusinessBusinessIdWorkinghoursQueryKey = (
  businessId?: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
) => {
  return [
    `/api/business/${businessId}/workinghours`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiBusinessBusinessIdWorkinghoursQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdWorkinghoursQueryKey(businessId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdWorkinghours(
      businessId,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdWorkinghoursQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>
>;
export type GetApiBusinessBusinessIdWorkinghoursQueryError = ErrorType<unknown>;

export function useGetApiBusinessBusinessIdWorkinghours<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params: undefined | GetApiBusinessBusinessIdWorkinghoursParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdWorkinghours<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdWorkinghours<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdWorkinghours<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdWorkinghoursParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdWorkinghours>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdWorkinghoursQueryOptions(
    businessId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdWorkinghours = (
  businessId: number,
  createWorkingHourCommand: CreateWorkingHourCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/workinghours`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createWorkingHourCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdWorkinghoursMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>,
    TError,
    { businessId: number; data: CreateWorkingHourCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>,
  TError,
  { businessId: number; data: CreateWorkingHourCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdWorkinghours"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>,
    { businessId: number; data: CreateWorkingHourCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdWorkinghours(
      businessId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdWorkinghoursMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>
>;
export type PostApiBusinessBusinessIdWorkinghoursMutationBody =
  CreateWorkingHourCommand;
export type PostApiBusinessBusinessIdWorkinghoursMutationError =
  ErrorType<unknown>;

export const usePostApiBusinessBusinessIdWorkinghours = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>,
      TError,
      { businessId: number; data: CreateWorkingHourCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdWorkinghours>>,
  TError,
  { businessId: number; data: CreateWorkingHourCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdWorkinghoursMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdWorkinghoursWorkingHourId = (
  businessId: number,
  workingHourId: number,
  updateWorkingHourCommand: UpdateWorkingHourCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/workinghours/${workingHourId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateWorkingHourCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      TError,
      {
        businessId: number;
        workingHourId: number;
        data: UpdateWorkingHourCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>
    >,
    TError,
    {
      businessId: number;
      workingHourId: number;
      data: UpdateWorkingHourCommand;
    },
    TContext
  > => {
    const mutationKey = ["putApiBusinessBusinessIdWorkinghoursWorkingHourId"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      {
        businessId: number;
        workingHourId: number;
        data: UpdateWorkingHourCommand;
      }
    > = (props) => {
      const { businessId, workingHourId, data } = props ?? {};

      return putApiBusinessBusinessIdWorkinghoursWorkingHourId(
        businessId,
        workingHourId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PutApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>
    >
  >;
export type PutApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationBody =
  UpdateWorkingHourCommand;
export type PutApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdWorkinghoursWorkingHourId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      TError,
      {
        businessId: number;
        workingHourId: number;
        data: UpdateWorkingHourCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdWorkinghoursWorkingHourId>>,
  TError,
  { businessId: number; workingHourId: number; data: UpdateWorkingHourCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdWorkinghoursWorkingHourId = (
  businessId: number,
  workingHourId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/workinghours/${workingHourId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      TError,
      { businessId: number; workingHourId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
    >,
    TError,
    { businessId: number; workingHourId: number },
    TContext
  > => {
    const mutationKey = [
      "deleteApiBusinessBusinessIdWorkinghoursWorkingHourId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      { businessId: number; workingHourId: number }
    > = (props) => {
      const { businessId, workingHourId } = props ?? {};

      return deleteApiBusinessBusinessIdWorkinghoursWorkingHourId(
        businessId,
        workingHourId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
    >
  >;

export type DeleteApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdWorkinghoursWorkingHourId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
      >,
      TError,
      { businessId: number; workingHourId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteApiBusinessBusinessIdWorkinghoursWorkingHourId>
  >,
  TError,
  { businessId: number; workingHourId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdWorkinghoursWorkingHourIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
