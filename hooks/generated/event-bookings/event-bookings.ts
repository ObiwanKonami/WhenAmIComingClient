/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CreateEventBookingCommand } from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdEventsEventIdBookings = (
  businessId: number,
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/bookings`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetApiBusinessBusinessIdEventsEventIdBookingsQueryKey = (
  businessId?: number,
  eventId?: number,
) => {
  return [`/api/business/${businessId}/events/${eventId}/bookings`] as const;
};

export const getGetApiBusinessBusinessIdEventsEventIdBookingsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdEventsEventIdBookingsQueryKey(
      businessId,
      eventId,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdEventsEventIdBookings(
      businessId,
      eventId,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(businessId && eventId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdEventsEventIdBookingsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>>
  >;
export type GetApiBusinessBusinessIdEventsEventIdBookingsQueryError =
  ErrorType<unknown>;

export function useGetApiBusinessBusinessIdEventsEventIdBookings<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  eventId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdEventsEventIdBookings<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdEventsEventIdBookings<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdEventsEventIdBookings<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdEventsEventIdBookings>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetApiBusinessBusinessIdEventsEventIdBookingsQueryOptions(
      businessId,
      eventId,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdEventsEventIdBookings = (
  businessId: string,
  eventId: number,
  createEventBookingCommand: CreateEventBookingCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/bookings`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventBookingCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdEventsEventIdBookingsMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>
      >,
      TError,
      { businessId: string; eventId: number; data: CreateEventBookingCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>>,
    TError,
    { businessId: string; eventId: number; data: CreateEventBookingCommand },
    TContext
  > => {
    const mutationKey = ["postApiBusinessBusinessIdEventsEventIdBookings"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>
      >,
      { businessId: string; eventId: number; data: CreateEventBookingCommand }
    > = (props) => {
      const { businessId, eventId, data } = props ?? {};

      return postApiBusinessBusinessIdEventsEventIdBookings(
        businessId,
        eventId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiBusinessBusinessIdEventsEventIdBookingsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>>
  >;
export type PostApiBusinessBusinessIdEventsEventIdBookingsMutationBody =
  CreateEventBookingCommand;
export type PostApiBusinessBusinessIdEventsEventIdBookingsMutationError =
  ErrorType<unknown>;

export const usePostApiBusinessBusinessIdEventsEventIdBookings = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>
      >,
      TError,
      { businessId: string; eventId: number; data: CreateEventBookingCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdBookings>>,
  TError,
  { businessId: string; eventId: number; data: CreateEventBookingCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdEventsEventIdBookingsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId = (
  businessId: string,
  eventId: string,
  bookingId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/bookings/${bookingId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdEventsEventIdBookingsBookingIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId
        >
      >,
      TError,
      { businessId: string; eventId: string; bookingId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId
      >
    >,
    TError,
    { businessId: string; eventId: string; bookingId: number },
    TContext
  > => {
    const mutationKey = [
      "deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId
        >
      >,
      { businessId: string; eventId: string; bookingId: number }
    > = (props) => {
      const { businessId, eventId, bookingId } = props ?? {};

      return deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId(
        businessId,
        eventId,
        bookingId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdEventsEventIdBookingsBookingIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId
      >
    >
  >;

export type DeleteApiBusinessBusinessIdEventsEventIdBookingsBookingIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdEventsEventIdBookingsBookingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId
        >
      >,
      TError,
      { businessId: string; eventId: string; bookingId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteApiBusinessBusinessIdEventsEventIdBookingsBookingId>
  >,
  TError,
  { businessId: string; eventId: string; bookingId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdEventsEventIdBookingsBookingIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
