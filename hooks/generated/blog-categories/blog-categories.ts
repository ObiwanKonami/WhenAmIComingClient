/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BlogCategoryDto,
  CreateBlogCategoryCommand,
  ProblemDetails,
  UpdateBlogCategoryCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBlogCategories = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<BlogCategoryDto[]>(
    { url: `/api/BlogCategories`, method: "GET", signal },
    options,
  );
};

export const getGetApiBlogCategoriesQueryKey = () => {
  return [`/api/BlogCategories`] as const;
};

export const getGetApiBlogCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBlogCategories>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiBlogCategories>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiBlogCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBlogCategories>>
  > = ({ signal }) => getApiBlogCategories(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBlogCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBlogCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBlogCategories>>
>;
export type GetApiBlogCategoriesQueryError = ErrorType<unknown>;

export function useGetApiBlogCategories<
  TData = Awaited<ReturnType<typeof getApiBlogCategories>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBlogCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiBlogCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBlogCategories<
  TData = Awaited<ReturnType<typeof getApiBlogCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBlogCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiBlogCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBlogCategories<
  TData = Awaited<ReturnType<typeof getApiBlogCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBlogCategories<
  TData = Awaited<ReturnType<typeof getApiBlogCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBlogCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBlogCategoriesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBlogCategories = (
  createBlogCategoryCommand: CreateBlogCategoryCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/BlogCategories`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBlogCategoryCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBlogCategoriesMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBlogCategories>>,
    TError,
    { data: CreateBlogCategoryCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBlogCategories>>,
  TError,
  { data: CreateBlogCategoryCommand },
  TContext
> => {
  const mutationKey = ["postApiBlogCategories"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBlogCategories>>,
    { data: CreateBlogCategoryCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiBlogCategories(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBlogCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBlogCategories>>
>;
export type PostApiBlogCategoriesMutationBody = CreateBlogCategoryCommand;
export type PostApiBlogCategoriesMutationError = ErrorType<unknown>;

export const usePostApiBlogCategories = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBlogCategories>>,
      TError,
      { data: CreateBlogCategoryCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBlogCategories>>,
  TError,
  { data: CreateBlogCategoryCommand },
  TContext
> => {
  const mutationOptions = getPostApiBlogCategoriesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBlogCategoriesCategoryId = (
  categoryId: number,
  updateBlogCategoryCommand: UpdateBlogCategoryCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/BlogCategories/${categoryId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateBlogCategoryCommand,
    },
    options,
  );
};

export const getPutApiBlogCategoriesCategoryIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>,
    TError,
    { categoryId: number; data: UpdateBlogCategoryCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>,
  TError,
  { categoryId: number; data: UpdateBlogCategoryCommand },
  TContext
> => {
  const mutationKey = ["putApiBlogCategoriesCategoryId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>,
    { categoryId: number; data: UpdateBlogCategoryCommand }
  > = (props) => {
    const { categoryId, data } = props ?? {};

    return putApiBlogCategoriesCategoryId(categoryId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBlogCategoriesCategoryIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>
>;
export type PutApiBlogCategoriesCategoryIdMutationBody =
  UpdateBlogCategoryCommand;
export type PutApiBlogCategoriesCategoryIdMutationError =
  ErrorType<ProblemDetails>;

export const usePutApiBlogCategoriesCategoryId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>,
      TError,
      { categoryId: number; data: UpdateBlogCategoryCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBlogCategoriesCategoryId>>,
  TError,
  { categoryId: number; data: UpdateBlogCategoryCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBlogCategoriesCategoryIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBlogCategoriesCategoryId = (
  categoryId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/BlogCategories/${categoryId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiBlogCategoriesCategoryIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>,
    TError,
    { categoryId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>,
  TError,
  { categoryId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBlogCategoriesCategoryId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>,
    { categoryId: number }
  > = (props) => {
    const { categoryId } = props ?? {};

    return deleteApiBlogCategoriesCategoryId(categoryId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBlogCategoriesCategoryIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>
>;

export type DeleteApiBlogCategoriesCategoryIdMutationError =
  ErrorType<ProblemDetails>;

export const useDeleteApiBlogCategoriesCategoryId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>,
      TError,
      { categoryId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBlogCategoriesCategoryId>>,
  TError,
  { categoryId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBlogCategoriesCategoryIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
