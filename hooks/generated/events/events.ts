/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateEventCommand,
  CreateEventTicketCommand,
  UpdateEventCommand,
  UpdateEventTicketCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdEvents = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/events`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdEventsQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/events`] as const;
};

export const getGetApiBusinessBusinessIdEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdEventsQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdEvents(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>
>;
export type GetApiBusinessBusinessIdEventsQueryError = ErrorType<unknown>;

export function useGetApiBusinessBusinessIdEvents<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdEvents<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdEvents<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdEvents<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdEvents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdEventsQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdEvents = (
  businessId: number,
  createEventCommand: CreateEventCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdEventsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>,
    TError,
    { businessId: number; data: CreateEventCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>,
  TError,
  { businessId: number; data: CreateEventCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdEvents"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>,
    { businessId: number; data: CreateEventCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdEvents(businessId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdEventsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>
>;
export type PostApiBusinessBusinessIdEventsMutationBody = CreateEventCommand;
export type PostApiBusinessBusinessIdEventsMutationError = ErrorType<unknown>;

export const usePostApiBusinessBusinessIdEvents = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>,
      TError,
      { businessId: number; data: CreateEventCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEvents>>,
  TError,
  { businessId: number; data: CreateEventCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdEventsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdEventsEventId = (
  businessId: number,
  eventId: number,
  updateEventCommand: UpdateEventCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateEventCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdEventsEventIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>,
    TError,
    { businessId: number; eventId: number; data: UpdateEventCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>,
  TError,
  { businessId: number; eventId: number; data: UpdateEventCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessBusinessIdEventsEventId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>,
    { businessId: number; eventId: number; data: UpdateEventCommand }
  > = (props) => {
    const { businessId, eventId, data } = props ?? {};

    return putApiBusinessBusinessIdEventsEventId(
      businessId,
      eventId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessBusinessIdEventsEventIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>
>;
export type PutApiBusinessBusinessIdEventsEventIdMutationBody =
  UpdateEventCommand;
export type PutApiBusinessBusinessIdEventsEventIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdEventsEventId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>,
      TError,
      { businessId: number; eventId: number; data: UpdateEventCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdEventsEventId>>,
  TError,
  { businessId: number; eventId: number; data: UpdateEventCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdEventsEventIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdEventsEventId = (
  businessId: number,
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/events/${eventId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdEventsEventIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>,
    TError,
    { businessId: number; eventId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>,
  TError,
  { businessId: number; eventId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBusinessBusinessIdEventsEventId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>,
    { businessId: number; eventId: number }
  > = (props) => {
    const { businessId, eventId } = props ?? {};

    return deleteApiBusinessBusinessIdEventsEventId(
      businessId,
      eventId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBusinessBusinessIdEventsEventIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>
  >;

export type DeleteApiBusinessBusinessIdEventsEventIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdEventsEventId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>,
      TError,
      { businessId: number; eventId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdEventsEventId>>,
  TError,
  { businessId: number; eventId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdEventsEventIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiBusinessBusinessIdEventsEventIdTickets = (
  businessId: string,
  eventId: number,
  createEventTicketCommand: CreateEventTicketCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/tickets`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventTicketCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdEventsEventIdTicketsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>,
    TError,
    { businessId: string; eventId: number; data: CreateEventTicketCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>,
  TError,
  { businessId: string; eventId: number; data: CreateEventTicketCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdEventsEventIdTickets"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>,
    { businessId: string; eventId: number; data: CreateEventTicketCommand }
  > = (props) => {
    const { businessId, eventId, data } = props ?? {};

    return postApiBusinessBusinessIdEventsEventIdTickets(
      businessId,
      eventId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdEventsEventIdTicketsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>
  >;
export type PostApiBusinessBusinessIdEventsEventIdTicketsMutationBody =
  CreateEventTicketCommand;
export type PostApiBusinessBusinessIdEventsEventIdTicketsMutationError =
  ErrorType<unknown>;

export const usePostApiBusinessBusinessIdEventsEventIdTickets = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>,
      TError,
      { businessId: string; eventId: number; data: CreateEventTicketCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdEventsEventIdTickets>>,
  TError,
  { businessId: string; eventId: number; data: CreateEventTicketCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdEventsEventIdTicketsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdEventsEventIdTicketsTicketId = (
  businessId: string,
  eventId: number,
  ticketId: number,
  updateEventTicketCommand: UpdateEventTicketCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/tickets/${ticketId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateEventTicketCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
      >,
      TError,
      {
        businessId: string;
        eventId: number;
        ticketId: number;
        data: UpdateEventTicketCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
    >,
    TError,
    {
      businessId: string;
      eventId: number;
      ticketId: number;
      data: UpdateEventTicketCommand;
    },
    TContext
  > => {
    const mutationKey = [
      "putApiBusinessBusinessIdEventsEventIdTicketsTicketId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
      >,
      {
        businessId: string;
        eventId: number;
        ticketId: number;
        data: UpdateEventTicketCommand;
      }
    > = (props) => {
      const { businessId, eventId, ticketId, data } = props ?? {};

      return putApiBusinessBusinessIdEventsEventIdTicketsTicketId(
        businessId,
        eventId,
        ticketId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PutApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
    >
  >;
export type PutApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationBody =
  UpdateEventTicketCommand;
export type PutApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdEventsEventIdTicketsTicketId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
      >,
      TError,
      {
        businessId: string;
        eventId: number;
        ticketId: number;
        data: UpdateEventTicketCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof putApiBusinessBusinessIdEventsEventIdTicketsTicketId>
  >,
  TError,
  {
    businessId: string;
    eventId: number;
    ticketId: number;
    data: UpdateEventTicketCommand;
  },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId = (
  businessId: string,
  eventId: number,
  ticketId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/events/${eventId}/tickets/${ticketId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId
        >
      >,
      TError,
      { businessId: string; eventId: number; ticketId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId>
    >,
    TError,
    { businessId: string; eventId: number; ticketId: number },
    TContext
  > => {
    const mutationKey = [
      "deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId
        >
      >,
      { businessId: string; eventId: number; ticketId: number }
    > = (props) => {
      const { businessId, eventId, ticketId } = props ?? {};

      return deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId(
        businessId,
        eventId,
        ticketId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId>
    >
  >;

export type DeleteApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdEventsEventIdTicketsTicketId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId
        >
      >,
      TError,
      { businessId: string; eventId: number; ticketId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteApiBusinessBusinessIdEventsEventIdTicketsTicketId>
  >,
  TError,
  { businessId: string; eventId: number; ticketId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdEventsEventIdTicketsTicketIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
