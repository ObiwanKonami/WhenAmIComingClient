/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BusinessDto,
  CreateBusinessCommand,
  ProblemDetails,
  SlugAvailabilityDto,
  UpdateBusinessCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusiness = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<BusinessDto[]>(
    { url: `/api/Business`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessQueryKey = () => {
  return [`/api/Business`] as const;
};

export const getGetApiBusinessQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusiness>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiBusiness>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiBusinessQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBusiness>>> = ({
    signal,
  }) => getApiBusiness(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusiness>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusiness>>
>;
export type GetApiBusinessQueryError = ErrorType<unknown>;

export function useGetApiBusiness<
  TData = Awaited<ReturnType<typeof getApiBusiness>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBusiness>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusiness>>,
          TError,
          Awaited<ReturnType<typeof getApiBusiness>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusiness<
  TData = Awaited<ReturnType<typeof getApiBusiness>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBusiness>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusiness>>,
          TError,
          Awaited<ReturnType<typeof getApiBusiness>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusiness<
  TData = Awaited<ReturnType<typeof getApiBusiness>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBusiness>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusiness<
  TData = Awaited<ReturnType<typeof getApiBusiness>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiBusiness>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusiness = (
  createBusinessCommand: CreateBusinessCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Business`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBusinessCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusiness>>,
    TError,
    { data: CreateBusinessCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusiness>>,
  TError,
  { data: CreateBusinessCommand },
  TContext
> => {
  const mutationKey = ["postApiBusiness"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusiness>>,
    { data: CreateBusinessCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiBusiness(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusiness>>
>;
export type PostApiBusinessMutationBody = CreateBusinessCommand;
export type PostApiBusinessMutationError = ErrorType<ProblemDetails>;

export const usePostApiBusiness = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusiness>>,
      TError,
      { data: CreateBusinessCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusiness>>,
  TError,
  { data: CreateBusinessCommand },
  TContext
> => {
  const mutationOptions = getPostApiBusinessMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessId = (
  id: number,
  updateBusinessCommand: UpdateBusinessCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Business/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateBusinessCommand,
    },
    options,
  );
};

export const getPutApiBusinessIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessId>>,
    TError,
    { id: number; data: UpdateBusinessCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessId>>,
  TError,
  { id: number; data: UpdateBusinessCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessId>>,
    { id: number; data: UpdateBusinessCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiBusinessId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBusinessId>>
>;
export type PutApiBusinessIdMutationBody = UpdateBusinessCommand;
export type PutApiBusinessIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails | ProblemDetails
>;

export const usePutApiBusinessId = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessId>>,
      TError,
      { id: number; data: UpdateBusinessCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessId>>,
  TError,
  { id: number; data: UpdateBusinessCommand },
  TContext
> => {
  const mutationOptions = getPutApiBusinessIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessId = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Business/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiBusinessIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBusinessId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteApiBusinessId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBusinessId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiBusinessId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBusinessIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiBusinessId>>
>;

export type DeleteApiBusinessIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const useDeleteApiBusinessId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBusinessId>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiBusinessIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiBusinessCheckSlugSlug = (
  slug: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SlugAvailabilityDto>(
    { url: `/api/Business/check-slug/${slug}`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessCheckSlugSlugQueryKey = (slug?: string) => {
  return [`/api/Business/check-slug/${slug}`] as const;
};

export const getGetApiBusinessCheckSlugSlugQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
  TError = ErrorType<unknown>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiBusinessCheckSlugSlugQueryKey(slug);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>
  > = ({ signal }) => getApiBusinessCheckSlugSlug(slug, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!slug,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessCheckSlugSlugQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>
>;
export type GetApiBusinessCheckSlugSlugQueryError = ErrorType<unknown>;

export function useGetApiBusinessCheckSlugSlug<
  TData = Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
  TError = ErrorType<unknown>,
>(
  slug: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessCheckSlugSlug<
  TData = Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
  TError = ErrorType<unknown>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessCheckSlugSlug<
  TData = Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
  TError = ErrorType<unknown>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessCheckSlugSlug<
  TData = Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
  TError = ErrorType<unknown>,
>(
  slug: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessCheckSlugSlug>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessCheckSlugSlugQueryOptions(
    slug,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
