/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AssignPermissionToRoleCommand,
  AssignUserToRoleCommand,
  CreateRoleCommand,
  RemovePermissionFromRoleCommand,
  RemoveUserFromRoleCommand,
  UpdateRoleCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiRoles = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Roles`, method: "GET", signal },
    options,
  );
};

export const getGetApiRolesQueryKey = () => {
  return [`/api/Roles`] as const;
};

export const getGetApiRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRoles>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRolesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRoles>>> = ({
    signal,
  }) => getApiRoles(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRoles>>
>;
export type GetApiRolesQueryError = ErrorType<unknown>;

export function useGetApiRoles<
  TData = Awaited<ReturnType<typeof getApiRoles>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRoles<
  TData = Awaited<ReturnType<typeof getApiRoles>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiRoles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRoles<
  TData = Awaited<ReturnType<typeof getApiRoles>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiRoles<
  TData = Awaited<ReturnType<typeof getApiRoles>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiRolesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiRoles = (
  createRoleCommand: CreateRoleCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRoleCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRolesMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRoles>>,
    TError,
    { data: CreateRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRoles>>,
  TError,
  { data: CreateRoleCommand },
  TContext
> => {
  const mutationKey = ["postApiRoles"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRoles>>,
    { data: CreateRoleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRoles(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRoles>>
>;
export type PostApiRolesMutationBody = CreateRoleCommand;
export type PostApiRolesMutationError = ErrorType<unknown>;

export const usePostApiRoles = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRoles>>,
      TError,
      { data: CreateRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRoles>>,
  TError,
  { data: CreateRoleCommand },
  TContext
> => {
  const mutationOptions = getPostApiRolesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiRolesRoleId = (
  roleId: number,
  updateRoleCommand: UpdateRoleCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles/${roleId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateRoleCommand,
    },
    options,
  );
};

export const getPutApiRolesRoleIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRolesRoleId>>,
    TError,
    { roleId: number; data: UpdateRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRolesRoleId>>,
  TError,
  { roleId: number; data: UpdateRoleCommand },
  TContext
> => {
  const mutationKey = ["putApiRolesRoleId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRolesRoleId>>,
    { roleId: number; data: UpdateRoleCommand }
  > = (props) => {
    const { roleId, data } = props ?? {};

    return putApiRolesRoleId(roleId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRolesRoleIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRolesRoleId>>
>;
export type PutApiRolesRoleIdMutationBody = UpdateRoleCommand;
export type PutApiRolesRoleIdMutationError = ErrorType<unknown>;

export const usePutApiRolesRoleId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiRolesRoleId>>,
      TError,
      { roleId: number; data: UpdateRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiRolesRoleId>>,
  TError,
  { roleId: number; data: UpdateRoleCommand },
  TContext
> => {
  const mutationOptions = getPutApiRolesRoleIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiRolesRoleId = (
  roleId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Roles/${roleId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiRolesRoleIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRolesRoleId>>,
    TError,
    { roleId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRolesRoleId>>,
  TError,
  { roleId: number },
  TContext
> => {
  const mutationKey = ["deleteApiRolesRoleId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiRolesRoleId>>,
    { roleId: number }
  > = (props) => {
    const { roleId } = props ?? {};

    return deleteApiRolesRoleId(roleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRolesRoleIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRolesRoleId>>
>;

export type DeleteApiRolesRoleIdMutationError = ErrorType<unknown>;

export const useDeleteApiRolesRoleId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiRolesRoleId>>,
      TError,
      { roleId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRolesRoleId>>,
  TError,
  { roleId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiRolesRoleIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiRolesPermissions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Roles/permissions`, method: "GET", signal },
    options,
  );
};

export const getGetApiRolesPermissionsQueryKey = () => {
  return [`/api/Roles/permissions`] as const;
};

export const getGetApiRolesPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRolesPermissions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiRolesPermissions>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiRolesPermissionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiRolesPermissions>>
  > = ({ signal }) => getApiRolesPermissions(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRolesPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiRolesPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRolesPermissions>>
>;
export type GetApiRolesPermissionsQueryError = ErrorType<unknown>;

export function useGetApiRolesPermissions<
  TData = Awaited<ReturnType<typeof getApiRolesPermissions>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiRolesPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRolesPermissions>>,
          TError,
          Awaited<ReturnType<typeof getApiRolesPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRolesPermissions<
  TData = Awaited<ReturnType<typeof getApiRolesPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiRolesPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRolesPermissions>>,
          TError,
          Awaited<ReturnType<typeof getApiRolesPermissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRolesPermissions<
  TData = Awaited<ReturnType<typeof getApiRolesPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiRolesPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiRolesPermissions<
  TData = Awaited<ReturnType<typeof getApiRolesPermissions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiRolesPermissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiRolesPermissionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiRolesAssignUser = (
  assignUserToRoleCommand: AssignUserToRoleCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles/assign-user`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: assignUserToRoleCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRolesAssignUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRolesAssignUser>>,
    TError,
    { data: AssignUserToRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRolesAssignUser>>,
  TError,
  { data: AssignUserToRoleCommand },
  TContext
> => {
  const mutationKey = ["postApiRolesAssignUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRolesAssignUser>>,
    { data: AssignUserToRoleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRolesAssignUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRolesAssignUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRolesAssignUser>>
>;
export type PostApiRolesAssignUserMutationBody = AssignUserToRoleCommand;
export type PostApiRolesAssignUserMutationError = ErrorType<unknown>;

export const usePostApiRolesAssignUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRolesAssignUser>>,
      TError,
      { data: AssignUserToRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRolesAssignUser>>,
  TError,
  { data: AssignUserToRoleCommand },
  TContext
> => {
  const mutationOptions = getPostApiRolesAssignUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiRolesRemoveUser = (
  removeUserFromRoleCommand: RemoveUserFromRoleCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles/remove-user`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: removeUserFromRoleCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRolesRemoveUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRolesRemoveUser>>,
    TError,
    { data: RemoveUserFromRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRolesRemoveUser>>,
  TError,
  { data: RemoveUserFromRoleCommand },
  TContext
> => {
  const mutationKey = ["postApiRolesRemoveUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRolesRemoveUser>>,
    { data: RemoveUserFromRoleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRolesRemoveUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRolesRemoveUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRolesRemoveUser>>
>;
export type PostApiRolesRemoveUserMutationBody = RemoveUserFromRoleCommand;
export type PostApiRolesRemoveUserMutationError = ErrorType<unknown>;

export const usePostApiRolesRemoveUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRolesRemoveUser>>,
      TError,
      { data: RemoveUserFromRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRolesRemoveUser>>,
  TError,
  { data: RemoveUserFromRoleCommand },
  TContext
> => {
  const mutationOptions = getPostApiRolesRemoveUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiRolesAssignPermission = (
  assignPermissionToRoleCommand: AssignPermissionToRoleCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles/assign-permission`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: assignPermissionToRoleCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRolesAssignPermissionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRolesAssignPermission>>,
    TError,
    { data: AssignPermissionToRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRolesAssignPermission>>,
  TError,
  { data: AssignPermissionToRoleCommand },
  TContext
> => {
  const mutationKey = ["postApiRolesAssignPermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRolesAssignPermission>>,
    { data: AssignPermissionToRoleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRolesAssignPermission(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRolesAssignPermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRolesAssignPermission>>
>;
export type PostApiRolesAssignPermissionMutationBody =
  AssignPermissionToRoleCommand;
export type PostApiRolesAssignPermissionMutationError = ErrorType<unknown>;

export const usePostApiRolesAssignPermission = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRolesAssignPermission>>,
      TError,
      { data: AssignPermissionToRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRolesAssignPermission>>,
  TError,
  { data: AssignPermissionToRoleCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiRolesAssignPermissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiRolesRemovePermission = (
  removePermissionFromRoleCommand: RemovePermissionFromRoleCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Roles/remove-permission`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: removePermissionFromRoleCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRolesRemovePermissionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRolesRemovePermission>>,
    TError,
    { data: RemovePermissionFromRoleCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRolesRemovePermission>>,
  TError,
  { data: RemovePermissionFromRoleCommand },
  TContext
> => {
  const mutationKey = ["postApiRolesRemovePermission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRolesRemovePermission>>,
    { data: RemovePermissionFromRoleCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRolesRemovePermission(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRolesRemovePermissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRolesRemovePermission>>
>;
export type PostApiRolesRemovePermissionMutationBody =
  RemovePermissionFromRoleCommand;
export type PostApiRolesRemovePermissionMutationError = ErrorType<unknown>;

export const usePostApiRolesRemovePermission = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRolesRemovePermission>>,
      TError,
      { data: RemovePermissionFromRoleCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRolesRemovePermission>>,
  TError,
  { data: RemovePermissionFromRoleCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiRolesRemovePermissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
