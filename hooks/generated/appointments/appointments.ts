/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AvailabilitySlotDto,
  CreateAppointmentCommand,
  GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  UpdateAppointmentCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdAppointmentsAvailability = (
  businessId: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AvailabilitySlotDto[]>(
    {
      url: `/api/business/${businessId}/appointments/availability`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetApiBusinessBusinessIdAppointmentsAvailabilityQueryKey = (
  businessId?: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
) => {
  return [
    `/api/business/${businessId}/appointments/availability`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiBusinessBusinessIdAppointmentsAvailabilityQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdAppointmentsAvailabilityQueryKey(
      businessId,
      params,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdAppointmentsAvailability(
      businessId,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
    >,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdAppointmentsAvailabilityQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>>
  >;
export type GetApiBusinessBusinessIdAppointmentsAvailabilityQueryError =
  ErrorType<unknown>;

export function useGetApiBusinessBusinessIdAppointmentsAvailability<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params: undefined | GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdAppointmentsAvailability<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdAppointmentsAvailability<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdAppointmentsAvailability<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  params?: GetApiBusinessBusinessIdAppointmentsAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdAppointmentsAvailability>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetApiBusinessBusinessIdAppointmentsAvailabilityQueryOptions(
      businessId,
      params,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiBusinessBusinessIdAppointments = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/appointments`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdAppointmentsQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/appointments`] as const;
};

export const getGetApiBusinessBusinessIdAppointmentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdAppointmentsQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdAppointments(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdAppointmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>
>;
export type GetApiBusinessBusinessIdAppointmentsQueryError = ErrorType<unknown>;

export function useGetApiBusinessBusinessIdAppointments<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdAppointments<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdAppointments<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdAppointments<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdAppointments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdAppointmentsQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdAppointments = (
  businessId: number,
  createAppointmentCommand: CreateAppointmentCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/appointments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAppointmentCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdAppointmentsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>,
    TError,
    { businessId: number; data: CreateAppointmentCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>,
  TError,
  { businessId: number; data: CreateAppointmentCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdAppointments"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>,
    { businessId: number; data: CreateAppointmentCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdAppointments(
      businessId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdAppointmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>
>;
export type PostApiBusinessBusinessIdAppointmentsMutationBody =
  CreateAppointmentCommand;
export type PostApiBusinessBusinessIdAppointmentsMutationError =
  ErrorType<unknown>;

export const usePostApiBusinessBusinessIdAppointments = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>,
      TError,
      { businessId: number; data: CreateAppointmentCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdAppointments>>,
  TError,
  { businessId: number; data: CreateAppointmentCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdAppointmentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdAppointmentsAppointmentId = (
  businessId: number,
  appointmentId: number,
  updateAppointmentCommand: UpdateAppointmentCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/appointments/${appointmentId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateAppointmentCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdAppointmentsAppointmentIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      TError,
      {
        businessId: number;
        appointmentId: number;
        data: UpdateAppointmentCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>
    >,
    TError,
    {
      businessId: number;
      appointmentId: number;
      data: UpdateAppointmentCommand;
    },
    TContext
  > => {
    const mutationKey = ["putApiBusinessBusinessIdAppointmentsAppointmentId"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      {
        businessId: number;
        appointmentId: number;
        data: UpdateAppointmentCommand;
      }
    > = (props) => {
      const { businessId, appointmentId, data } = props ?? {};

      return putApiBusinessBusinessIdAppointmentsAppointmentId(
        businessId,
        appointmentId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PutApiBusinessBusinessIdAppointmentsAppointmentIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>
    >
  >;
export type PutApiBusinessBusinessIdAppointmentsAppointmentIdMutationBody =
  UpdateAppointmentCommand;
export type PutApiBusinessBusinessIdAppointmentsAppointmentIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdAppointmentsAppointmentId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      TError,
      {
        businessId: number;
        appointmentId: number;
        data: UpdateAppointmentCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdAppointmentsAppointmentId>>,
  TError,
  { businessId: number; appointmentId: number; data: UpdateAppointmentCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdAppointmentsAppointmentIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdAppointmentsAppointmentId = (
  businessId: number,
  appointmentId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/appointments/${appointmentId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdAppointmentsAppointmentIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      TError,
      { businessId: number; appointmentId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
    >,
    TError,
    { businessId: number; appointmentId: number },
    TContext
  > => {
    const mutationKey = [
      "deleteApiBusinessBusinessIdAppointmentsAppointmentId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      { businessId: number; appointmentId: number }
    > = (props) => {
      const { businessId, appointmentId } = props ?? {};

      return deleteApiBusinessBusinessIdAppointmentsAppointmentId(
        businessId,
        appointmentId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdAppointmentsAppointmentIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
    >
  >;

export type DeleteApiBusinessBusinessIdAppointmentsAppointmentIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdAppointmentsAppointmentId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
      >,
      TError,
      { businessId: number; appointmentId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteApiBusinessBusinessIdAppointmentsAppointmentId>
  >,
  TError,
  { businessId: number; appointmentId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdAppointmentsAppointmentIdMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
