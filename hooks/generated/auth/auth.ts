/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ForgotPasswordCommand,
  LoginCommand,
  RegisterCommand,
  ResetPasswordCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiAuthRegister = (
  registerCommand: RegisterCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerCommand,
      signal,
    },
    options,
  );
};

export const getPostApiAuthRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthRegister>>,
    TError,
    { data: RegisterCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthRegister>>,
  TError,
  { data: RegisterCommand },
  TContext
> => {
  const mutationKey = ["postApiAuthRegister"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthRegister>>,
    { data: RegisterCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRegister>>
>;
export type PostApiAuthRegisterMutationBody = RegisterCommand;
export type PostApiAuthRegisterMutationError = ErrorType<unknown>;

export const usePostApiAuthRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthRegister>>,
      TError,
      { data: RegisterCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthRegister>>,
  TError,
  { data: RegisterCommand },
  TContext
> => {
  const mutationOptions = getPostApiAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthLogin = (
  loginCommand: LoginCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginCommand,
      signal,
    },
    options,
  );
};

export const getPostApiAuthLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginCommand },
  TContext
> => {
  const mutationKey = ["postApiAuthLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginCommand;
export type PostApiAuthLoginMutationError = ErrorType<unknown>;

export const usePostApiAuthLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthLogin>>,
      TError,
      { data: LoginCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginCommand },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthLogout = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Auth/logout`, method: "POST", signal },
    options,
  );
};

export const getPostApiAuthLogoutMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postApiAuthLogout"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    void
  > = () => {
    return postApiAuthLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogout>>
>;

export type PostApiAuthLogoutMutationError = ErrorType<unknown>;

export const usePostApiAuthLogout = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthLogout>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiAuthVerifySession = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Auth/verify-session`, method: "GET", signal },
    options,
  );
};

export const getGetApiAuthVerifySessionQueryKey = () => {
  return [`/api/Auth/verify-session`] as const;
};

export const getGetApiAuthVerifySessionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAuthVerifySession>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiAuthVerifySession>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAuthVerifySessionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAuthVerifySession>>
  > = ({ signal }) => getApiAuthVerifySession(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAuthVerifySession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAuthVerifySessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthVerifySession>>
>;
export type GetApiAuthVerifySessionQueryError = ErrorType<unknown>;

export function useGetApiAuthVerifySession<
  TData = Awaited<ReturnType<typeof getApiAuthVerifySession>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthVerifySession>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthVerifySession>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthVerifySession>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthVerifySession<
  TData = Awaited<ReturnType<typeof getApiAuthVerifySession>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthVerifySession>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAuthVerifySession>>,
          TError,
          Awaited<ReturnType<typeof getApiAuthVerifySession>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAuthVerifySession<
  TData = Awaited<ReturnType<typeof getApiAuthVerifySession>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthVerifySession>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiAuthVerifySession<
  TData = Awaited<ReturnType<typeof getApiAuthVerifySession>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAuthVerifySession>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAuthVerifySessionQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiAuthForgotPassword = (
  forgotPasswordCommand: ForgotPasswordCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Auth/forgot-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: forgotPasswordCommand,
      signal,
    },
    options,
  );
};

export const getPostApiAuthForgotPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
    TError,
    { data: ForgotPasswordCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
  TError,
  { data: ForgotPasswordCommand },
  TContext
> => {
  const mutationKey = ["postApiAuthForgotPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
    { data: ForgotPasswordCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthForgotPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthForgotPassword>>
>;
export type PostApiAuthForgotPasswordMutationBody = ForgotPasswordCommand;
export type PostApiAuthForgotPasswordMutationError = ErrorType<unknown>;

export const usePostApiAuthForgotPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
      TError,
      { data: ForgotPasswordCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthForgotPassword>>,
  TError,
  { data: ForgotPasswordCommand },
  TContext
> => {
  const mutationOptions = getPostApiAuthForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiAuthResetPassword = (
  resetPasswordCommand: ResetPasswordCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Auth/reset-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: resetPasswordCommand,
      signal,
    },
    options,
  );
};

export const getPostApiAuthResetPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthResetPassword>>,
    TError,
    { data: ResetPasswordCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>,
  TError,
  { data: ResetPasswordCommand },
  TContext
> => {
  const mutationKey = ["postApiAuthResetPassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthResetPassword>>,
    { data: ResetPasswordCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthResetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>
>;
export type PostApiAuthResetPasswordMutationBody = ResetPasswordCommand;
export type PostApiAuthResetPasswordMutationError = ErrorType<unknown>;

export const usePostApiAuthResetPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiAuthResetPassword>>,
      TError,
      { data: ResetPasswordCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthResetPassword>>,
  TError,
  { data: ResetPasswordCommand },
  TContext
> => {
  const mutationOptions = getPostApiAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
