/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateUserCommand,
  ProblemDetails,
  UpdateUserAndSubscriptionCommand,
  UpdateUserCommand,
  UserDto,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiUsers = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserDto[]>(
    { url: `/api/Users`, method: "GET", signal },
    options,
  );
};

export const getGetApiUsersQueryKey = () => {
  return [`/api/Users`] as const;
};

export const getGetApiUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({
    signal,
  }) => getApiUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsers>>
>;
export type GetApiUsersQueryError = ErrorType<unknown>;

export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiUsers = (
  createUserCommand: CreateUserCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Users`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserCommand,
      signal,
    },
    options,
  );
};

export const getPostApiUsersMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsers>>,
    TError,
    { data: CreateUserCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsers>>,
  TError,
  { data: CreateUserCommand },
  TContext
> => {
  const mutationKey = ["postApiUsers"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsers>>,
    { data: CreateUserCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsers(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsers>>
>;
export type PostApiUsersMutationBody = CreateUserCommand;
export type PostApiUsersMutationError = ErrorType<ProblemDetails>;

export const usePostApiUsers = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiUsers>>,
      TError,
      { data: CreateUserCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsers>>,
  TError,
  { data: CreateUserCommand },
  TContext
> => {
  const mutationOptions = getPostApiUsersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiUsersId = (
  id: number,
  updateUserCommand: UpdateUserCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Users/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserCommand,
    },
    options,
  );
};

export const getPutApiUsersIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersId>>,
    TError,
    { id: number; data: UpdateUserCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersId>>,
  TError,
  { id: number; data: UpdateUserCommand },
  TContext
> => {
  const mutationKey = ["putApiUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersId>>,
    { id: number; data: UpdateUserCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsersId>>
>;
export type PutApiUsersIdMutationBody = UpdateUserCommand;
export type PutApiUsersIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePutApiUsersId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiUsersId>>,
      TError,
      { id: number; data: UpdateUserCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersId>>,
  TError,
  { id: number; data: UpdateUserCommand },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiUsersId = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Users/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiUsersIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsersId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiUsersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteApiUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiUsersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiUsersId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiUsersId>>
>;

export type DeleteApiUsersIdMutationError = ErrorType<ProblemDetails>;

export const useDeleteApiUsersId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiUsersId>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiUsersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiUsersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiUsersIdAdmin = (
  id: number,
  updateUserAndSubscriptionCommand: UpdateUserAndSubscriptionCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Users/${id}/admin`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserAndSubscriptionCommand,
    },
    options,
  );
};

export const getPutApiUsersIdAdminMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsersIdAdmin>>,
    TError,
    { id: number; data: UpdateUserAndSubscriptionCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsersIdAdmin>>,
  TError,
  { id: number; data: UpdateUserAndSubscriptionCommand },
  TContext
> => {
  const mutationKey = ["putApiUsersIdAdmin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersIdAdmin>>,
    { id: number; data: UpdateUserAndSubscriptionCommand }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiUsersIdAdmin(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsersIdAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsersIdAdmin>>
>;
export type PutApiUsersIdAdminMutationBody = UpdateUserAndSubscriptionCommand;
export type PutApiUsersIdAdminMutationError = ErrorType<ProblemDetails>;

export const usePutApiUsersIdAdmin = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiUsersIdAdmin>>,
      TError,
      { id: number; data: UpdateUserAndSubscriptionCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsersIdAdmin>>,
  TError,
  { id: number; data: UpdateUserAndSubscriptionCommand },
  TContext
> => {
  const mutationOptions = getPutApiUsersIdAdminMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
