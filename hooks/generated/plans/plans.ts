/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreatePlanCommand,
  PlanDto,
  PlanForUpdateDto,
  ProblemDetails,
  UpdatePlanCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiPlans = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PlanDto[]>(
    { url: `/api/Plans`, method: "GET", signal },
    options,
  );
};

export const getGetApiPlansQueryKey = () => {
  return [`/api/Plans`] as const;
};

export const getGetApiPlansQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPlans>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiPlans>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPlansQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPlans>>> = ({
    signal,
  }) => getApiPlans(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPlans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPlansQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPlans>>
>;
export type GetApiPlansQueryError = ErrorType<unknown>;

export function useGetApiPlans<
  TData = Awaited<ReturnType<typeof getApiPlans>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPlans>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlans>>,
          TError,
          Awaited<ReturnType<typeof getApiPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlans<
  TData = Awaited<ReturnType<typeof getApiPlans>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPlans>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlans>>,
          TError,
          Awaited<ReturnType<typeof getApiPlans>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlans<
  TData = Awaited<ReturnType<typeof getApiPlans>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPlans<
  TData = Awaited<ReturnType<typeof getApiPlans>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPlans>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPlansQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiPlans = (
  createPlanCommand: CreatePlanCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Plans`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPlanCommand,
      signal,
    },
    options,
  );
};

export const getPostApiPlansMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPlans>>,
    TError,
    { data: CreatePlanCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPlans>>,
  TError,
  { data: CreatePlanCommand },
  TContext
> => {
  const mutationKey = ["postApiPlans"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPlans>>,
    { data: CreatePlanCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPlans(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPlansMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPlans>>
>;
export type PostApiPlansMutationBody = CreatePlanCommand;
export type PostApiPlansMutationError = ErrorType<ProblemDetails>;

export const usePostApiPlans = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiPlans>>,
      TError,
      { data: CreatePlanCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiPlans>>,
  TError,
  { data: CreatePlanCommand },
  TContext
> => {
  const mutationOptions = getPostApiPlansMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getApiPlansIdForUpdate = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PlanForUpdateDto>(
    { url: `/api/Plans/${id}/for-update`, method: "GET", signal },
    options,
  );
};

export const getGetApiPlansIdForUpdateQueryKey = (id?: number) => {
  return [`/api/Plans/${id}/for-update`] as const;
};

export const getGetApiPlansIdForUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiPlansIdForUpdateQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiPlansIdForUpdate>>
  > = ({ signal }) => getApiPlansIdForUpdate(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPlansIdForUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPlansIdForUpdate>>
>;
export type GetApiPlansIdForUpdateQueryError = ErrorType<ProblemDetails>;

export function useGetApiPlansIdForUpdate<
  TData = Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
          TError,
          Awaited<ReturnType<typeof getApiPlansIdForUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlansIdForUpdate<
  TData = Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
          TError,
          Awaited<ReturnType<typeof getApiPlansIdForUpdate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPlansIdForUpdate<
  TData = Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPlansIdForUpdate<
  TData = Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiPlansIdForUpdate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPlansIdForUpdateQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiPlansPlanId = (
  planId: number,
  updatePlanCommand: UpdatePlanCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Plans/${planId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updatePlanCommand,
    },
    options,
  );
};

export const getPutApiPlansPlanIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPlansPlanId>>,
    TError,
    { planId: number; data: UpdatePlanCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPlansPlanId>>,
  TError,
  { planId: number; data: UpdatePlanCommand },
  TContext
> => {
  const mutationKey = ["putApiPlansPlanId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPlansPlanId>>,
    { planId: number; data: UpdatePlanCommand }
  > = (props) => {
    const { planId, data } = props ?? {};

    return putApiPlansPlanId(planId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPlansPlanIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPlansPlanId>>
>;
export type PutApiPlansPlanIdMutationBody = UpdatePlanCommand;
export type PutApiPlansPlanIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePutApiPlansPlanId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiPlansPlanId>>,
      TError,
      { planId: number; data: UpdatePlanCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiPlansPlanId>>,
  TError,
  { planId: number; data: UpdatePlanCommand },
  TContext
> => {
  const mutationOptions = getPutApiPlansPlanIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiPlansPlanId = (
  planId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Plans/${planId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiPlansPlanIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiPlansPlanId>>,
    TError,
    { planId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiPlansPlanId>>,
  TError,
  { planId: number },
  TContext
> => {
  const mutationKey = ["deleteApiPlansPlanId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiPlansPlanId>>,
    { planId: number }
  > = (props) => {
    const { planId } = props ?? {};

    return deleteApiPlansPlanId(planId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiPlansPlanIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPlansPlanId>>
>;

export type DeleteApiPlansPlanIdMutationError = ErrorType<ProblemDetails>;

export const useDeleteApiPlansPlanId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiPlansPlanId>>,
      TError,
      { planId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiPlansPlanId>>,
  TError,
  { planId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiPlansPlanIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
