/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateFaqCommand,
  FaqDto,
  ProblemDetails,
  UpdateFaqCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiFaqs = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FaqDto[]>(
    { url: `/api/Faqs`, method: "GET", signal },
    options,
  );
};

export const getGetApiFaqsQueryKey = () => {
  return [`/api/Faqs`] as const;
};

export const getGetApiFaqsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiFaqs>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiFaqs>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiFaqsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiFaqs>>> = ({
    signal,
  }) => getApiFaqs(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiFaqs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiFaqsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiFaqs>>
>;
export type GetApiFaqsQueryError = ErrorType<unknown>;

export function useGetApiFaqs<
  TData = Awaited<ReturnType<typeof getApiFaqs>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFaqs>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFaqs>>,
          TError,
          Awaited<ReturnType<typeof getApiFaqs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiFaqs<
  TData = Awaited<ReturnType<typeof getApiFaqs>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFaqs>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiFaqs>>,
          TError,
          Awaited<ReturnType<typeof getApiFaqs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiFaqs<
  TData = Awaited<ReturnType<typeof getApiFaqs>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFaqs>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiFaqs<
  TData = Awaited<ReturnType<typeof getApiFaqs>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiFaqs>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiFaqsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiFaqs = (
  createFaqCommand: CreateFaqCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Faqs`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFaqCommand,
      signal,
    },
    options,
  );
};

export const getPostApiFaqsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiFaqs>>,
    TError,
    { data: CreateFaqCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiFaqs>>,
  TError,
  { data: CreateFaqCommand },
  TContext
> => {
  const mutationKey = ["postApiFaqs"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiFaqs>>,
    { data: CreateFaqCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiFaqs(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiFaqsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiFaqs>>
>;
export type PostApiFaqsMutationBody = CreateFaqCommand;
export type PostApiFaqsMutationError = ErrorType<unknown>;

export const usePostApiFaqs = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiFaqs>>,
      TError,
      { data: CreateFaqCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiFaqs>>,
  TError,
  { data: CreateFaqCommand },
  TContext
> => {
  const mutationOptions = getPostApiFaqsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiFaqsFaqId = (
  faqId: number,
  updateFaqCommand: UpdateFaqCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Faqs/${faqId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateFaqCommand,
    },
    options,
  );
};

export const getPutApiFaqsFaqIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiFaqsFaqId>>,
    TError,
    { faqId: number; data: UpdateFaqCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiFaqsFaqId>>,
  TError,
  { faqId: number; data: UpdateFaqCommand },
  TContext
> => {
  const mutationKey = ["putApiFaqsFaqId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiFaqsFaqId>>,
    { faqId: number; data: UpdateFaqCommand }
  > = (props) => {
    const { faqId, data } = props ?? {};

    return putApiFaqsFaqId(faqId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiFaqsFaqIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiFaqsFaqId>>
>;
export type PutApiFaqsFaqIdMutationBody = UpdateFaqCommand;
export type PutApiFaqsFaqIdMutationError = ErrorType<ProblemDetails>;

export const usePutApiFaqsFaqId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiFaqsFaqId>>,
      TError,
      { faqId: number; data: UpdateFaqCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiFaqsFaqId>>,
  TError,
  { faqId: number; data: UpdateFaqCommand },
  TContext
> => {
  const mutationOptions = getPutApiFaqsFaqIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiFaqsFaqId = (
  faqId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Faqs/${faqId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiFaqsFaqIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiFaqsFaqId>>,
    TError,
    { faqId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiFaqsFaqId>>,
  TError,
  { faqId: number },
  TContext
> => {
  const mutationKey = ["deleteApiFaqsFaqId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiFaqsFaqId>>,
    { faqId: number }
  > = (props) => {
    const { faqId } = props ?? {};

    return deleteApiFaqsFaqId(faqId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiFaqsFaqIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiFaqsFaqId>>
>;

export type DeleteApiFaqsFaqIdMutationError = ErrorType<unknown>;

export const useDeleteApiFaqsFaqId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiFaqsFaqId>>,
      TError,
      { faqId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiFaqsFaqId>>,
  TError,
  { faqId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiFaqsFaqIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
