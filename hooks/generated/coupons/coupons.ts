/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CouponDto,
  CreateCouponCommand,
  ProblemDetails,
  UpdateCouponCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiCoupons = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CouponDto[]>(
    { url: `/api/Coupons`, method: "GET", signal },
    options,
  );
};

export const getGetApiCouponsQueryKey = () => {
  return [`/api/Coupons`] as const;
};

export const getGetApiCouponsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCoupons>>,
  TError = ErrorType<ProblemDetails>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiCoupons>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCouponsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCoupons>>> = ({
    signal,
  }) => getApiCoupons(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCoupons>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCouponsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCoupons>>
>;
export type GetApiCouponsQueryError = ErrorType<ProblemDetails>;

export function useGetApiCoupons<
  TData = Awaited<ReturnType<typeof getApiCoupons>>,
  TError = ErrorType<ProblemDetails>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCoupons>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCoupons>>,
          TError,
          Awaited<ReturnType<typeof getApiCoupons>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCoupons<
  TData = Awaited<ReturnType<typeof getApiCoupons>>,
  TError = ErrorType<ProblemDetails>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCoupons>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCoupons>>,
          TError,
          Awaited<ReturnType<typeof getApiCoupons>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiCoupons<
  TData = Awaited<ReturnType<typeof getApiCoupons>>,
  TError = ErrorType<ProblemDetails>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCoupons>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiCoupons<
  TData = Awaited<ReturnType<typeof getApiCoupons>>,
  TError = ErrorType<ProblemDetails>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCoupons>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiCouponsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiCoupons = (
  createCouponCommand: CreateCouponCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/api/Coupons`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCouponCommand,
      signal,
    },
    options,
  );
};

export const getPostApiCouponsMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCoupons>>,
    TError,
    { data: CreateCouponCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCoupons>>,
  TError,
  { data: CreateCouponCommand },
  TContext
> => {
  const mutationKey = ["postApiCoupons"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCoupons>>,
    { data: CreateCouponCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCoupons(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCouponsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCoupons>>
>;
export type PostApiCouponsMutationBody = CreateCouponCommand;
export type PostApiCouponsMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePostApiCoupons = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiCoupons>>,
      TError,
      { data: CreateCouponCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiCoupons>>,
  TError,
  { data: CreateCouponCommand },
  TContext
> => {
  const mutationOptions = getPostApiCouponsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiCouponsCouponId = (
  couponId: number,
  updateCouponCommand: UpdateCouponCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Coupons/${couponId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateCouponCommand,
    },
    options,
  );
};

export const getPutApiCouponsCouponIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCouponsCouponId>>,
    TError,
    { couponId: number; data: UpdateCouponCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCouponsCouponId>>,
  TError,
  { couponId: number; data: UpdateCouponCommand },
  TContext
> => {
  const mutationKey = ["putApiCouponsCouponId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCouponsCouponId>>,
    { couponId: number; data: UpdateCouponCommand }
  > = (props) => {
    const { couponId, data } = props ?? {};

    return putApiCouponsCouponId(couponId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCouponsCouponIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCouponsCouponId>>
>;
export type PutApiCouponsCouponIdMutationBody = UpdateCouponCommand;
export type PutApiCouponsCouponIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePutApiCouponsCouponId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiCouponsCouponId>>,
      TError,
      { couponId: number; data: UpdateCouponCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiCouponsCouponId>>,
  TError,
  { couponId: number; data: UpdateCouponCommand },
  TContext
> => {
  const mutationOptions = getPutApiCouponsCouponIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiCouponsCouponId = (
  couponId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Coupons/${couponId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiCouponsCouponIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCouponsCouponId>>,
    TError,
    { couponId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCouponsCouponId>>,
  TError,
  { couponId: number },
  TContext
> => {
  const mutationKey = ["deleteApiCouponsCouponId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCouponsCouponId>>,
    { couponId: number }
  > = (props) => {
    const { couponId } = props ?? {};

    return deleteApiCouponsCouponId(couponId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCouponsCouponIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCouponsCouponId>>
>;

export type DeleteApiCouponsCouponIdMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const useDeleteApiCouponsCouponId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiCouponsCouponId>>,
      TError,
      { couponId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCouponsCouponId>>,
  TError,
  { couponId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiCouponsCouponIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
