/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateSliderCommand,
  UpdateSliderCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdSliders = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/sliders`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdSlidersQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/sliders`] as const;
};

export const getGetApiBusinessBusinessIdSlidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdSlidersQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdSliders(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdSlidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>
>;
export type GetApiBusinessBusinessIdSlidersQueryError = ErrorType<unknown>;

export function useGetApiBusinessBusinessIdSliders<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdSliders<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdSliders<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdSliders<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdSliders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdSlidersQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdSliders = (
  businessId: number,
  createSliderCommand: CreateSliderCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/sliders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createSliderCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdSlidersMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>,
    TError,
    { businessId: number; data: CreateSliderCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>,
  TError,
  { businessId: number; data: CreateSliderCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdSliders"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>,
    { businessId: number; data: CreateSliderCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdSliders(businessId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdSlidersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>
>;
export type PostApiBusinessBusinessIdSlidersMutationBody = CreateSliderCommand;
export type PostApiBusinessBusinessIdSlidersMutationError = ErrorType<unknown>;

export const usePostApiBusinessBusinessIdSliders = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>,
      TError,
      { businessId: number; data: CreateSliderCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdSliders>>,
  TError,
  { businessId: number; data: CreateSliderCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdSlidersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdSlidersSliderId = (
  businessId: number,
  sliderId: number,
  updateSliderCommand: UpdateSliderCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/sliders/${sliderId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateSliderCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdSlidersSliderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>,
    TError,
    { businessId: number; sliderId: number; data: UpdateSliderCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>,
  TError,
  { businessId: number; sliderId: number; data: UpdateSliderCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessBusinessIdSlidersSliderId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>,
    { businessId: number; sliderId: number; data: UpdateSliderCommand }
  > = (props) => {
    const { businessId, sliderId, data } = props ?? {};

    return putApiBusinessBusinessIdSlidersSliderId(
      businessId,
      sliderId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessBusinessIdSlidersSliderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>
>;
export type PutApiBusinessBusinessIdSlidersSliderIdMutationBody =
  UpdateSliderCommand;
export type PutApiBusinessBusinessIdSlidersSliderIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdSlidersSliderId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>,
      TError,
      { businessId: number; sliderId: number; data: UpdateSliderCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdSlidersSliderId>>,
  TError,
  { businessId: number; sliderId: number; data: UpdateSliderCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdSlidersSliderIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdSlidersSliderId = (
  businessId: number,
  sliderId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/sliders/${sliderId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdSlidersSliderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>,
    TError,
    { businessId: number; sliderId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>,
  TError,
  { businessId: number; sliderId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBusinessBusinessIdSlidersSliderId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>,
    { businessId: number; sliderId: number }
  > = (props) => {
    const { businessId, sliderId } = props ?? {};

    return deleteApiBusinessBusinessIdSlidersSliderId(
      businessId,
      sliderId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBusinessBusinessIdSlidersSliderIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>
  >;

export type DeleteApiBusinessBusinessIdSlidersSliderIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdSlidersSliderId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>,
      TError,
      { businessId: number; sliderId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdSlidersSliderId>>,
  TError,
  { businessId: number; sliderId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdSlidersSliderIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
