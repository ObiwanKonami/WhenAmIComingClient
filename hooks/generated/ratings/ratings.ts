/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateRatingCommand,
  GetApiRatingsParams,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiRatings = (
  params?: GetApiRatingsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Ratings`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiRatingsQueryKey = (params?: GetApiRatingsParams) => {
  return [`/api/Ratings`, ...(params ? [params] : [])] as const;
};

export const getGetApiRatingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRatings>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiRatingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRatings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRatingsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRatings>>> = ({
    signal,
  }) => getApiRatings(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRatings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiRatingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRatings>>
>;
export type GetApiRatingsQueryError = ErrorType<unknown>;

export function useGetApiRatings<
  TData = Awaited<ReturnType<typeof getApiRatings>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetApiRatingsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRatings>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRatings>>,
          TError,
          Awaited<ReturnType<typeof getApiRatings>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRatings<
  TData = Awaited<ReturnType<typeof getApiRatings>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiRatingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRatings>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRatings>>,
          TError,
          Awaited<ReturnType<typeof getApiRatings>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRatings<
  TData = Awaited<ReturnType<typeof getApiRatings>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiRatingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRatings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiRatings<
  TData = Awaited<ReturnType<typeof getApiRatings>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiRatingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRatings>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiRatingsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiRatings = (
  createRatingCommand: CreateRatingCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Ratings`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRatingCommand,
      signal,
    },
    options,
  );
};

export const getPostApiRatingsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRatings>>,
    TError,
    { data: CreateRatingCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRatings>>,
  TError,
  { data: CreateRatingCommand },
  TContext
> => {
  const mutationKey = ["postApiRatings"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRatings>>,
    { data: CreateRatingCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRatings(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRatingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRatings>>
>;
export type PostApiRatingsMutationBody = CreateRatingCommand;
export type PostApiRatingsMutationError = ErrorType<unknown>;

export const usePostApiRatings = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiRatings>>,
      TError,
      { data: CreateRatingCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiRatings>>,
  TError,
  { data: CreateRatingCommand },
  TContext
> => {
  const mutationOptions = getPostApiRatingsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiRatingsRatingIdApprove = (
  ratingId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Ratings/${ratingId}/approve`, method: "PUT" },
    options,
  );
};

export const getPutApiRatingsRatingIdApproveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>,
    TError,
    { ratingId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>,
  TError,
  { ratingId: number },
  TContext
> => {
  const mutationKey = ["putApiRatingsRatingIdApprove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>,
    { ratingId: number }
  > = (props) => {
    const { ratingId } = props ?? {};

    return putApiRatingsRatingIdApprove(ratingId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiRatingsRatingIdApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>
>;

export type PutApiRatingsRatingIdApproveMutationError = ErrorType<unknown>;

export const usePutApiRatingsRatingIdApprove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>,
      TError,
      { ratingId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiRatingsRatingIdApprove>>,
  TError,
  { ratingId: number },
  TContext
> => {
  const mutationOptions =
    getPutApiRatingsRatingIdApproveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiRatingsRatingId = (
  ratingId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/Ratings/${ratingId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiRatingsRatingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRatingsRatingId>>,
    TError,
    { ratingId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRatingsRatingId>>,
  TError,
  { ratingId: number },
  TContext
> => {
  const mutationKey = ["deleteApiRatingsRatingId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiRatingsRatingId>>,
    { ratingId: number }
  > = (props) => {
    const { ratingId } = props ?? {};

    return deleteApiRatingsRatingId(ratingId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRatingsRatingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRatingsRatingId>>
>;

export type DeleteApiRatingsRatingIdMutationError = ErrorType<unknown>;

export const useDeleteApiRatingsRatingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiRatingsRatingId>>,
      TError,
      { ratingId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRatingsRatingId>>,
  TError,
  { ratingId: number },
  TContext
> => {
  const mutationOptions = getDeleteApiRatingsRatingIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
