/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  RequestPayoutCommand,
  UpdatePayoutStatusCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiPayouts = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/Payouts`, method: "GET", signal },
    options,
  );
};

export const getGetApiPayoutsQueryKey = () => {
  return [`/api/Payouts`] as const;
};

export const getGetApiPayoutsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiPayouts>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiPayouts>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiPayoutsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPayouts>>> = ({
    signal,
  }) => getApiPayouts(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiPayouts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPayoutsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiPayouts>>
>;
export type GetApiPayoutsQueryError = ErrorType<unknown>;

export function useGetApiPayouts<
  TData = Awaited<ReturnType<typeof getApiPayouts>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPayouts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPayouts>>,
          TError,
          Awaited<ReturnType<typeof getApiPayouts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPayouts<
  TData = Awaited<ReturnType<typeof getApiPayouts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPayouts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPayouts>>,
          TError,
          Awaited<ReturnType<typeof getApiPayouts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPayouts<
  TData = Awaited<ReturnType<typeof getApiPayouts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPayouts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiPayouts<
  TData = Awaited<ReturnType<typeof getApiPayouts>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiPayouts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiPayoutsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiPayoutsRequest = (
  requestPayoutCommand: RequestPayoutCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/Payouts/request`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: requestPayoutCommand,
      signal,
    },
    options,
  );
};

export const getPostApiPayoutsRequestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiPayoutsRequest>>,
    TError,
    { data: RequestPayoutCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiPayoutsRequest>>,
  TError,
  { data: RequestPayoutCommand },
  TContext
> => {
  const mutationKey = ["postApiPayoutsRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiPayoutsRequest>>,
    { data: RequestPayoutCommand }
  > = (props) => {
    const { data } = props ?? {};

    return postApiPayoutsRequest(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiPayoutsRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiPayoutsRequest>>
>;
export type PostApiPayoutsRequestMutationBody = RequestPayoutCommand;
export type PostApiPayoutsRequestMutationError = ErrorType<unknown>;

export const usePostApiPayoutsRequest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiPayoutsRequest>>,
      TError,
      { data: RequestPayoutCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiPayoutsRequest>>,
  TError,
  { data: RequestPayoutCommand },
  TContext
> => {
  const mutationOptions = getPostApiPayoutsRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiPayoutsPayoutIdStatus = (
  payoutId: number,
  updatePayoutStatusCommand: UpdatePayoutStatusCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/Payouts/${payoutId}/status`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updatePayoutStatusCommand,
    },
    options,
  );
};

export const getPutApiPayoutsPayoutIdStatusMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>,
    TError,
    { payoutId: number; data: UpdatePayoutStatusCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>,
  TError,
  { payoutId: number; data: UpdatePayoutStatusCommand },
  TContext
> => {
  const mutationKey = ["putApiPayoutsPayoutIdStatus"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>,
    { payoutId: number; data: UpdatePayoutStatusCommand }
  > = (props) => {
    const { payoutId, data } = props ?? {};

    return putApiPayoutsPayoutIdStatus(payoutId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiPayoutsPayoutIdStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>
>;
export type PutApiPayoutsPayoutIdStatusMutationBody = UpdatePayoutStatusCommand;
export type PutApiPayoutsPayoutIdStatusMutationError = ErrorType<unknown>;

export const usePutApiPayoutsPayoutIdStatus = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>,
      TError,
      { payoutId: number; data: UpdatePayoutStatusCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiPayoutsPayoutIdStatus>>,
  TError,
  { payoutId: number; data: UpdatePayoutStatusCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiPayoutsPayoutIdStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
