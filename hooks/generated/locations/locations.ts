/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateLocationCommand,
  CreateResponse,
  LocationDto,
  ProblemDetails,
  UpdateLocationCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdLocations = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LocationDto[]>(
    { url: `/api/business/${businessId}/locations`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdLocationsQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/locations`] as const;
};

export const getGetApiBusinessBusinessIdLocationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdLocationsQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdLocations(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdLocationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>
>;
export type GetApiBusinessBusinessIdLocationsQueryError =
  ErrorType<ProblemDetails>;

export function useGetApiBusinessBusinessIdLocations<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdLocations<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdLocations<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdLocations<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
  TError = ErrorType<ProblemDetails>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdLocations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdLocationsQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdLocations = (
  businessId: number,
  createLocationCommand: CreateLocationCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateResponse>(
    {
      url: `/api/business/${businessId}/locations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createLocationCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdLocationsMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>,
    TError,
    { businessId: number; data: CreateLocationCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>,
  TError,
  { businessId: number; data: CreateLocationCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdLocations"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>,
    { businessId: number; data: CreateLocationCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdLocations(businessId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdLocationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>
>;
export type PostApiBusinessBusinessIdLocationsMutationBody =
  CreateLocationCommand;
export type PostApiBusinessBusinessIdLocationsMutationError = ErrorType<
  ProblemDetails | ProblemDetails
>;

export const usePostApiBusinessBusinessIdLocations = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>,
      TError,
      { businessId: number; data: CreateLocationCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdLocations>>,
  TError,
  { businessId: number; data: CreateLocationCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdLocationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdLocationsLocationId = (
  businessId: number,
  locationId: number,
  updateLocationCommand: UpdateLocationCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/locations/${locationId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateLocationCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdLocationsLocationIdMutationOptions = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>,
    TError,
    { businessId: number; locationId: number; data: UpdateLocationCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>,
  TError,
  { businessId: number; locationId: number; data: UpdateLocationCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessBusinessIdLocationsLocationId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>,
    { businessId: number; locationId: number; data: UpdateLocationCommand }
  > = (props) => {
    const { businessId, locationId, data } = props ?? {};

    return putApiBusinessBusinessIdLocationsLocationId(
      businessId,
      locationId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessBusinessIdLocationsLocationIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>
  >;
export type PutApiBusinessBusinessIdLocationsLocationIdMutationBody =
  UpdateLocationCommand;
export type PutApiBusinessBusinessIdLocationsLocationIdMutationError =
  ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>;

export const usePutApiBusinessBusinessIdLocationsLocationId = <
  TError = ErrorType<ProblemDetails | ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>,
      TError,
      { businessId: number; locationId: number; data: UpdateLocationCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdLocationsLocationId>>,
  TError,
  { businessId: number; locationId: number; data: UpdateLocationCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdLocationsLocationIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdLocationsLocationId = (
  businessId: number,
  locationId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/locations/${locationId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdLocationsLocationIdMutationOptions =
  <
    TError = ErrorType<ProblemDetails | ProblemDetails>,
    TContext = unknown,
  >(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>
      >,
      TError,
      { businessId: number; locationId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>>,
    TError,
    { businessId: number; locationId: number },
    TContext
  > => {
    const mutationKey = ["deleteApiBusinessBusinessIdLocationsLocationId"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>
      >,
      { businessId: number; locationId: number }
    > = (props) => {
      const { businessId, locationId } = props ?? {};

      return deleteApiBusinessBusinessIdLocationsLocationId(
        businessId,
        locationId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdLocationsLocationIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>>
  >;

export type DeleteApiBusinessBusinessIdLocationsLocationIdMutationError =
  ErrorType<ProblemDetails | ProblemDetails>;

export const useDeleteApiBusinessBusinessIdLocationsLocationId = <
  TError = ErrorType<ProblemDetails | ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>
      >,
      TError,
      { businessId: number; locationId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdLocationsLocationId>>,
  TError,
  { businessId: number; locationId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdLocationsLocationIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
