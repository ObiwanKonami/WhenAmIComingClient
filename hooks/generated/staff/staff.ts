/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateStaffCommand,
  ProblemDetails,
  UpdateStaffCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdStaff = (
  businessId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/staff`, method: "GET", signal },
    options,
  );
};

export const getGetApiBusinessBusinessIdStaffQueryKey = (
  businessId?: number,
) => {
  return [`/api/business/${businessId}/staff`] as const;
};

export const getGetApiBusinessBusinessIdStaffQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdStaffQueryKey(businessId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdStaff(businessId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!businessId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdStaffQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>
>;
export type GetApiBusinessBusinessIdStaffQueryError = ErrorType<unknown>;

export function useGetApiBusinessBusinessIdStaff<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdStaff<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
          TError,
          Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdStaff<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdStaff<
  TData = Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiBusinessBusinessIdStaff>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiBusinessBusinessIdStaffQueryOptions(
    businessId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdStaff = (
  businessId: number,
  createStaffCommand: CreateStaffCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/staff`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createStaffCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdStaffMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>,
    TError,
    { businessId: number; data: CreateStaffCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>,
  TError,
  { businessId: number; data: CreateStaffCommand },
  TContext
> => {
  const mutationKey = ["postApiBusinessBusinessIdStaff"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>,
    { businessId: number; data: CreateStaffCommand }
  > = (props) => {
    const { businessId, data } = props ?? {};

    return postApiBusinessBusinessIdStaff(businessId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBusinessBusinessIdStaffMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>
>;
export type PostApiBusinessBusinessIdStaffMutationBody = CreateStaffCommand;
export type PostApiBusinessBusinessIdStaffMutationError = ErrorType<unknown>;

export const usePostApiBusinessBusinessIdStaff = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>,
      TError,
      { businessId: number; data: CreateStaffCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdStaff>>,
  TError,
  { businessId: number; data: CreateStaffCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdStaffMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdStaffStaffId = (
  businessId: number,
  staffId: number,
  updateStaffCommand: UpdateStaffCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/staff/${staffId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateStaffCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdStaffStaffIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>,
    TError,
    { businessId: number; staffId: number; data: UpdateStaffCommand },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>,
  TError,
  { businessId: number; staffId: number; data: UpdateStaffCommand },
  TContext
> => {
  const mutationKey = ["putApiBusinessBusinessIdStaffStaffId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>,
    { businessId: number; staffId: number; data: UpdateStaffCommand }
  > = (props) => {
    const { businessId, staffId, data } = props ?? {};

    return putApiBusinessBusinessIdStaffStaffId(
      businessId,
      staffId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBusinessBusinessIdStaffStaffIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>
>;
export type PutApiBusinessBusinessIdStaffStaffIdMutationBody =
  UpdateStaffCommand;
export type PutApiBusinessBusinessIdStaffStaffIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdStaffStaffId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>,
      TError,
      { businessId: number; staffId: number; data: UpdateStaffCommand },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiBusinessBusinessIdStaffStaffId>>,
  TError,
  { businessId: number; staffId: number; data: UpdateStaffCommand },
  TContext
> => {
  const mutationOptions =
    getPutApiBusinessBusinessIdStaffStaffIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteApiBusinessBusinessIdStaffStaffId = (
  businessId: number,
  staffId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/api/business/${businessId}/staff/${staffId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiBusinessBusinessIdStaffStaffIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>,
    TError,
    { businessId: number; staffId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>,
  TError,
  { businessId: number; staffId: number },
  TContext
> => {
  const mutationKey = ["deleteApiBusinessBusinessIdStaffStaffId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>,
    { businessId: number; staffId: number }
  > = (props) => {
    const { businessId, staffId } = props ?? {};

    return deleteApiBusinessBusinessIdStaffStaffId(
      businessId,
      staffId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBusinessBusinessIdStaffStaffIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>
>;

export type DeleteApiBusinessBusinessIdStaffStaffIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdStaffStaffId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>,
      TError,
      { businessId: number; staffId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBusinessBusinessIdStaffStaffId>>,
  TError,
  { businessId: number; staffId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiBusinessBusinessIdStaffStaffIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postApiBusinessBusinessIdStaffStaffIdAssignServices = (
  businessId: number,
  staffId: number,
  postApiBusinessBusinessIdStaffStaffIdAssignServicesBody: number[],
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/staff/${staffId}/assign-services`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postApiBusinessBusinessIdStaffStaffIdAssignServicesBody,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdStaffStaffIdAssignServicesMutationOptions =
  <TError = ErrorType<ProblemDetails>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
      >,
      TError,
      { businessId: number; staffId: number; data: number[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
    >,
    TError,
    { businessId: number; staffId: number; data: number[] },
    TContext
  > => {
    const mutationKey = ["postApiBusinessBusinessIdStaffStaffIdAssignServices"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
      >,
      { businessId: number; staffId: number; data: number[] }
    > = (props) => {
      const { businessId, staffId, data } = props ?? {};

      return postApiBusinessBusinessIdStaffStaffIdAssignServices(
        businessId,
        staffId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiBusinessBusinessIdStaffStaffIdAssignServicesMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
    >
  >;
export type PostApiBusinessBusinessIdStaffStaffIdAssignServicesMutationBody =
  number[];
export type PostApiBusinessBusinessIdStaffStaffIdAssignServicesMutationError =
  ErrorType<ProblemDetails>;

export const usePostApiBusinessBusinessIdStaffStaffIdAssignServices = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
      >,
      TError,
      { businessId: number; staffId: number; data: number[] },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof postApiBusinessBusinessIdStaffStaffIdAssignServices>
  >,
  TError,
  { businessId: number; staffId: number; data: number[] },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdStaffStaffIdAssignServicesMutationOptions(
      options,
    );

  return useMutation(mutationOptions, queryClient);
};
