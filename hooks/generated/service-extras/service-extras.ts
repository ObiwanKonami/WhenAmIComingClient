/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateServiceExtraCommand,
  UpdateServiceExtraCommand,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiBusinessBusinessIdServicesServiceIdExtras = (
  businessId: number,
  serviceId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/services/${serviceId}/extras`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetApiBusinessBusinessIdServicesServiceIdExtrasQueryKey = (
  businessId?: number,
  serviceId?: number,
) => {
  return [`/api/business/${businessId}/services/${serviceId}/extras`] as const;
};

export const getGetApiBusinessBusinessIdServicesServiceIdExtrasQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  serviceId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiBusinessBusinessIdServicesServiceIdExtrasQueryKey(
      businessId,
      serviceId,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>>
  > = ({ signal }) =>
    getApiBusinessBusinessIdServicesServiceIdExtras(
      businessId,
      serviceId,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(businessId && serviceId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBusinessBusinessIdServicesServiceIdExtrasQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>>
  >;
export type GetApiBusinessBusinessIdServicesServiceIdExtrasQueryError =
  ErrorType<unknown>;

export function useGetApiBusinessBusinessIdServicesServiceIdExtras<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  serviceId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdServicesServiceIdExtras<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  serviceId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
          >
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiBusinessBusinessIdServicesServiceIdExtras<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  serviceId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiBusinessBusinessIdServicesServiceIdExtras<
  TData = Awaited<
    ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
  >,
  TError = ErrorType<unknown>,
>(
  businessId: number,
  serviceId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getApiBusinessBusinessIdServicesServiceIdExtras>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetApiBusinessBusinessIdServicesServiceIdExtrasQueryOptions(
      businessId,
      serviceId,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBusinessBusinessIdServicesServiceIdExtras = (
  businessId: number,
  serviceId: number,
  createServiceExtraCommand: CreateServiceExtraCommand,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/services/${serviceId}/extras`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createServiceExtraCommand,
      signal,
    },
    options,
  );
};

export const getPostApiBusinessBusinessIdServicesServiceIdExtrasMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>
      >,
      TError,
      {
        businessId: number;
        serviceId: number;
        data: CreateServiceExtraCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>
    >,
    TError,
    { businessId: number; serviceId: number; data: CreateServiceExtraCommand },
    TContext
  > => {
    const mutationKey = ["postApiBusinessBusinessIdServicesServiceIdExtras"];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>
      >,
      { businessId: number; serviceId: number; data: CreateServiceExtraCommand }
    > = (props) => {
      const { businessId, serviceId, data } = props ?? {};

      return postApiBusinessBusinessIdServicesServiceIdExtras(
        businessId,
        serviceId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiBusinessBusinessIdServicesServiceIdExtrasMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>>
  >;
export type PostApiBusinessBusinessIdServicesServiceIdExtrasMutationBody =
  CreateServiceExtraCommand;
export type PostApiBusinessBusinessIdServicesServiceIdExtrasMutationError =
  ErrorType<unknown>;

export const usePostApiBusinessBusinessIdServicesServiceIdExtras = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>
      >,
      TError,
      {
        businessId: number;
        serviceId: number;
        data: CreateServiceExtraCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiBusinessBusinessIdServicesServiceIdExtras>>,
  TError,
  { businessId: number; serviceId: number; data: CreateServiceExtraCommand },
  TContext
> => {
  const mutationOptions =
    getPostApiBusinessBusinessIdServicesServiceIdExtrasMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId = (
  businessId: number,
  serviceId: number,
  serviceExtraId: number,
  updateServiceExtraCommand: UpdateServiceExtraCommand,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/api/business/${businessId}/services/${serviceId}/extras/${serviceExtraId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateServiceExtraCommand,
    },
    options,
  );
};

export const getPutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
        >
      >,
      TError,
      {
        businessId: number;
        serviceId: number;
        serviceExtraId: number;
        data: UpdateServiceExtraCommand;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >,
    TError,
    {
      businessId: number;
      serviceId: number;
      serviceExtraId: number;
      data: UpdateServiceExtraCommand;
    },
    TContext
  > => {
    const mutationKey = [
      "putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
        >
      >,
      {
        businessId: number;
        serviceId: number;
        serviceExtraId: number;
        data: UpdateServiceExtraCommand;
      }
    > = (props) => {
      const { businessId, serviceId, serviceExtraId, data } = props ?? {};

      return putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId(
        businessId,
        serviceId,
        serviceExtraId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >
  >;
export type PutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationBody =
  UpdateServiceExtraCommand;
export type PutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationError =
  ErrorType<unknown>;

export const usePutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId =
  <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
      mutation?: UseMutationOptions<
        Awaited<
          ReturnType<
            typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
          >
        >,
        TError,
        {
          businessId: number;
          serviceId: number;
          serviceExtraId: number;
          data: UpdateServiceExtraCommand;
        },
        TContext
      >;
      request?: SecondParameter<typeof customInstance>;
    },
    queryClient?: QueryClient,
  ): UseMutationResult<
    Awaited<
      ReturnType<
        typeof putApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >,
    TError,
    {
      businessId: number;
      serviceId: number;
      serviceExtraId: number;
      data: UpdateServiceExtraCommand;
    },
    TContext
  > => {
    const mutationOptions =
      getPutApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationOptions(
        options,
      );

    return useMutation(mutationOptions, queryClient);
  };
export const deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId =
  (
    businessId: number,
    serviceId: number,
    serviceExtraId: number,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<null>(
      {
        url: `/api/business/${businessId}/services/${serviceId}/extras/${serviceExtraId}`,
        method: "DELETE",
      },
      options,
    );
  };

export const getDeleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationOptions =
  <TError = ErrorType<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
        >
      >,
      TError,
      { businessId: number; serviceId: number; serviceExtraId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >,
    TError,
    { businessId: number; serviceId: number; serviceExtraId: number },
    TContext
  > => {
    const mutationKey = [
      "deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId",
    ];
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
        >
      >,
      { businessId: number; serviceId: number; serviceExtraId: number }
    > = (props) => {
      const { businessId, serviceId, serviceExtraId } = props ?? {};

      return deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId(
        businessId,
        serviceId,
        serviceExtraId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >
  >;

export type DeleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationError =
  ErrorType<unknown>;

export const useDeleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId =
  <TError = ErrorType<unknown>, TContext = unknown>(
    options?: {
      mutation?: UseMutationOptions<
        Awaited<
          ReturnType<
            typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
          >
        >,
        TError,
        { businessId: number; serviceId: number; serviceExtraId: number },
        TContext
      >;
      request?: SecondParameter<typeof customInstance>;
    },
    queryClient?: QueryClient,
  ): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraId
      >
    >,
    TError,
    { businessId: number; serviceId: number; serviceExtraId: number },
    TContext
  > => {
    const mutationOptions =
      getDeleteApiBusinessBusinessIdServicesServiceIdExtrasServiceExtraIdMutationOptions(
        options,
      );

    return useMutation(mutationOptions, queryClient);
  };
