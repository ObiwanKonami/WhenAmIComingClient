/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * WAIC API
 * WAIC API endpoints
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  PostApiUploadImageBody,
  ProblemDetails,
  UploadResponse,
} from "../../../lib/api/generated/model";

import { customInstance } from "../../../lib/api/axios-instance";
import type { ErrorType } from "../../../lib/api/axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiUploadImage = (
  postApiUploadImageBody: PostApiUploadImageBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (postApiUploadImageBody.file !== undefined) {
    formData.append(`file`, postApiUploadImageBody.file);
  }

  return customInstance<UploadResponse>(
    {
      url: `/api/Upload/image`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
      signal,
    },
    options,
  );
};

export const getPostApiUploadImageMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUploadImage>>,
    TError,
    { data: PostApiUploadImageBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUploadImage>>,
  TError,
  { data: PostApiUploadImageBody },
  TContext
> => {
  const mutationKey = ["postApiUploadImage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUploadImage>>,
    { data: PostApiUploadImageBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUploadImage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUploadImage>>
>;
export type PostApiUploadImageMutationBody = PostApiUploadImageBody;
export type PostApiUploadImageMutationError = ErrorType<ProblemDetails>;

export const usePostApiUploadImage = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiUploadImage>>,
      TError,
      { data: PostApiUploadImageBody },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiUploadImage>>,
  TError,
  { data: PostApiUploadImageBody },
  TContext
> => {
  const mutationOptions = getPostApiUploadImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
